{"version":3,"sources":["Dropdown.jsx","App.js","reportWebVitals.js","index.js"],"names":["Dropdown","selected","setSelected","useState","isActive","setIsActive","inputRef","useRef","defaultOptions","options","setOptions","className","onClick","e","type","placeholder","ref","onChange","current","value","filter","option","toUpperCase","includes","map","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0NAsDeA,MApDf,YAA4C,EAAxBC,SAAyB,IAAfC,EAAc,EAAdA,YAC1B,EAAgCC,oBAAS,GAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACMC,EAAWC,mBACXC,EAAiB,CAAC,QAAS,YAAa,WAAY,YAAa,QACvE,EAA8BL,mBAASK,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,OACI,sBAAKC,UAAU,WAAf,UACI,sBAAKA,UAAU,kBAAkBC,QAAS,SAAAC,GACtCR,GAAaD,IADjB,UAGI,uBACIU,KAAK,OACLH,UAAU,eACVI,YAAY,kBACZC,IAAKV,EACLW,SAAU,SAAAJ,GACFP,EAASY,QAAQC,MACjBT,EACIF,EAAeY,QAAO,SAACC,GACnB,OAAGA,EAAOC,cAAcC,SAASjB,EAASY,QAAQC,MAAMG,eAC7CD,EAEJ,UAIfX,EAAWF,GACXN,EAAY,QAIxB,+BAAM,mBAAGS,UAAWP,EAAW,WAAa,oBAE/CA,GACG,qBAAKO,UAAU,mBAAf,SACKF,EAAQe,KAAI,SAAAH,GAAM,OACf,qBACAV,UAAU,gBACVC,QAAS,SAACC,GACNX,EAAYmB,GACZf,EAASY,QAAQC,MAAQE,EACzBhB,GAAY,IALhB,SAOKgB,aChCdI,MATf,WACE,MAAgCtB,mBAAS,IAAzC,mBAAOF,EAAP,KAAiBC,EAAjB,KACA,OACE,qBAAKS,UAAU,MAAf,SACE,cAAC,EAAD,CAAUV,SAAUA,EAAUC,YAAaA,OCIlCwB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.5460dc88.chunk.js","sourcesContent":["import { useRef, useState } from \"react\"\r\n\r\nfunction Dropdown ({selected, setSelected}) {\r\n    const [isActive, setIsActive] = useState(false)\r\n    const inputRef = useRef()\r\n    const defaultOptions = ['Pizza', 'Hamburger', 'Sandwich', 'Ice cream', 'Soda']\r\n    const [options, setOptions] = useState(defaultOptions)\r\n    return (\r\n        <div className=\"dropdown\">\r\n            <div className=\"dropdown-button\" onClick={e => {\r\n                setIsActive(!isActive)\r\n            }}>\r\n                <input\r\n                    type=\"text\"\r\n                    className=\"search-input\"\r\n                    placeholder=\"Choose one food\"\r\n                    ref={inputRef}\r\n                    onChange={e => {\r\n                        if (inputRef.current.value) {\r\n                            setOptions(\r\n                                defaultOptions.filter((option) => {\r\n                                    if(option.toUpperCase().includes(inputRef.current.value.toUpperCase())) {\r\n                                        return option\r\n                                    }\r\n                                    return null\r\n                                })\r\n                            )\r\n                        } else {\r\n                            setOptions(defaultOptions)\r\n                            setSelected('')\r\n                        }\r\n                    }}\r\n                />\r\n                <span><i className={isActive ? \"up-arrow\" : \"down-arrow\"}></i></span>\r\n            </div>\r\n            {isActive && (\r\n                <div className=\"dropdown-content\">\r\n                    {options.map(option => (\r\n                        <div \r\n                        className=\"dropdown-item\" \r\n                        onClick={(e) => {\r\n                            setSelected(option);\r\n                            inputRef.current.value = option;\r\n                            setIsActive(false);\r\n                        }}>\r\n                            {option}\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dropdown","import { useState } from 'react';\r\nimport './App.css';\r\nimport Dropdown from './Dropdown'\r\n\r\nfunction App() {\r\n  const [selected, setSelected] = useState(\"\")\r\n  return (\r\n    <div className=\"App\">\r\n      <Dropdown selected={selected} setSelected={setSelected} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}